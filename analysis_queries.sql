-- #################################################
-- Elevate Labs Data Analyst Internship - Task 4: SQL for Data Analysis
-- Database: ecommerce_task
-- Table: sales_transactions
-- #################################################

USE ecommerce_task;

-- Step 1: Query Optimization (Indexing)
-- This index is created on customer_key to speed up customer-based analysis (like ARPU).
CREATE INDEX IF NOT EXISTS idx_customer_key ON sales_transactions (customer_key);


-- 1. CORE BUSINESS METRICS (Uses: SUM, AVG, COUNT)
-- Objective: To gauge the overall financial health of the business.
SELECT
    SUM(total_price) AS Total_Revenue,
    AVG(total_price) AS Average_Transaction_Value_ATV,
    COUNT(payment_key) AS Total_Transactions,
    SUM(quantity) AS Total_Items_Sold
FROM
    sales_transactions;


-- 2. CUSTOMER ANALYSIS (Uses: Subquery - Advanced Technique)
-- Objective: Calculate Average Revenue Per User (ARPU) to understand customer value.
SELECT
    AVG(Customer_Revenue) AS Average_Revenue_Per_User_ARPU
FROM (
    -- Subquery: Calculates total revenue generated by each unique customer
    SELECT
        customer_key,
        SUM(total_price) AS Customer_Revenue
    FROM
        sales_transactions
    GROUP BY
        customer_key
) AS Customer_Sales_Summary;


-- 3. TOP SELLING ITEMS (Uses: GROUP BY, ORDER BY, LIMIT)
-- Objective: Identify the items that generate the most revenue.
SELECT
    item_key,
    SUM(quantity) AS Total_Quantity_Sold,
    SUM(total_price) AS Total_Revenue_Generated
FROM
    sales_transactions
GROUP BY
    item_key
ORDER BY
    Total_Revenue_Generated DESC
LIMIT 5;


-- 4. TOP PERFORMING STORES (Uses: GROUP BY, ORDER BY)
-- Objective: Rank stores based on total revenue.
SELECT
    store_key,
    COUNT(payment_key) AS Total_Transactions,
    SUM(total_price) AS Total_Store_Revenue
FROM
    sales_transactions
GROUP BY
    store_key
ORDER BY
    Total_Store_Revenue DESC;


-- 5. HIGH-VALUE TRANSACTION ANALYSIS (Uses: WHERE & HAVING)
-- Objective: Analyze stores driving large sales volumes (transaction price > 30).
SELECT
    store_key,
    COUNT(payment_key) AS High_Value_Transactions,
    SUM(total_price) AS Total_High_Value_Revenue,
    AVG(quantity) AS Avg_Items_in_High_Value_Order
FROM
    sales_transactions
WHERE
    total_price > 30  -- Filter individual transactions (WHERE)
GROUP BY
    store_key
ORDER BY
    Total_High_Value_Revenue DESC;


-- 6. CREATE & USE VIEW (Uses: CREATE VIEW - Advanced Technique)
-- Objective: Create a persistent virtual table for easy re-analysis of store performance.
CREATE VIEW Store_Performance_Summary_V AS
SELECT
    store_key,
    COUNT(payment_key) AS Transaction_Count,
    SUM(total_price) AS Total_Revenue,
    AVG(total_price) AS Avg_Transaction_Value
FROM
    sales_transactions
GROUP BY
    store_key;

-- VIEW USAGE: Querying the virtual table to see the final results
SELECT 
    store_key,
    Total_Revenue,
    Avg_Transaction_Value
FROM 
    Store_Performance_Summary_V
ORDER BY 
    Total_Revenue DESC;